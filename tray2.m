% Initialization
    close all; clear all; clc;
%

% Multiwell Parameters
    num_tiles_x = 18;
    num_tiles_y = 8;
    cell_length = 6;
    cell_width = 9;
    moat_depth = 5;
    well_depth = 6;
    well_angle_deg = 80;
    moat_extension_length = 0.75;
    moat_well_gap = 0.1;
    bezier_curve_projection_length = 0.5;
    superellipse_exponent = 4;
    num_points = 200;
%

% Outer Tray Parameters
    tray_outer_length = 127.95; 
    tray_outer_width = 86; 
    tray_height = 15; 
    tray_flange_length = 1; 
    tray_flange_height = 2.5; 
    tray_outer_line_length = 0.5; 
    tray_well_length = 9.225; 
    tray_well_width = 6.25; 
    triangle_length = 9; 
    triangle_offset = 1.15; 
    triangle_line_length = 0.26; 
    triangle_line_start_height = 6.75;
    triangle_line_end_height = 15;
%

% Text Parameters
    overall_test_width = 20;
    text_string = 'Wormotel Vol 2.0';
%

% Well Mask Function 
    well_top_gap_half_cell_length = ( ...
        (cell_length - 2 * moat_extension_length) / 2 - moat_well_gap ...
    );
    well_top_gap_half_cell_width = ( ...
        (cell_width - 2 * moat_extension_length) / 2 - moat_well_gap ...
    );

    well_mask_fun = @(u,v) ( ...
        abs(u / well_top_gap_half_cell_length) ...
        .^superellipse_exponent + ...
        abs(v / well_top_gap_half_cell_width) ...
        .^superellipse_exponent <= 1 ...
    );
%

% Well Top Functions
    multiwell_length = ( ...
        cell_length * num_tiles_x + 2 * moat_extension_length ...
    );
    multiwell_width = ( ...
        cell_width * num_tiles_y + 2 * moat_extension_length ...
    );

    well_top_funx = @(u,v) ( ...
        multiwell_length * (u - 0.5) ...
    );
    well_top_funy = @(u,v) ( ...
        multiwell_width * (v - 0.5) ...
    );
    well_top_funz = @(u,v) ( ...
        1 - well_mask_fun( ...
            multiwell_length * (u - 0.5), ...
            multiwell_width * (v - 0.5) ...
        ) ...
    );
%

% Moat Mask Functions 
    well_top_half_cell_length = ( ...
        (cell_length - 2 * moat_extension_length) / 2 ...
    ); 
    well_top_half_cell_width = ( ...
        (cell_width - 2 * moat_extension_length) / 2 ...
    );
    well_top_extended_half_cell_length = ( ...
        (cell_length - moat_extension_length) / 2 ...
    );
    well_top_extended_half_cell_width = ( ...
        (cell_width - moat_extension_length) / 2 ...
    );

    moat_mask_fun1 = @(u,v) ( ...
        abs(u) <= well_top_half_cell_length & ...
        abs(v) <= well_top_half_cell_width ...
    );
    moat_mask_fun2 = @(u,v) ( ...
        abs(u) <= well_top_extended_half_cell_length & ...
        abs(v) <= well_top_extended_half_cell_width ...
    );
% 

% Moat Top Functions 
    moat_top_funx = @(u,v) ( ...
        multiwell_length * (u - 0.5) ...
    );
    moat_top_funy = @(u,v) ( ...
        multiwell_width * (v - 0.5) ...
    );
    moat_top_funz = @(u,v) ( ...
        ones(size(u)) .*  ...
        moat_mask_fun1(moat_top_funx(u,v), moat_top_funy(u,v)) ...
    );
% 

% Moat Middle Functions 
    moat_mid_funx = @(u,v) ( ...
        multiwell_length * (u - 0.5) ...
    );
    moat_mid_funy = @(u,v) ( ...
        multiwell_width * (v - 0.5) ...
    );
    moat_mid_funz = @(u,v) ( ...
        -ones(size(u)) .* ...
        ~moat_mask_fun1(moat_top_funx(u,v), moat_top_funy(u,v)) ...
    );
%

% Moat Bottom Functions 
    moat_bottom_funx = @(u,v) ( ...
        multiwell_length * (u - 0.5) ...
    );
    moat_bottom_funy = @(u,v) ( ...
        multiwell_width * (v - 0.5) ...
    );
    moat_bottom_funz = @(u,v) ( ...
        (1 - moat_depth) * ones(size(u)) .* ...
        ~moat_mask_fun2(moat_bottom_funx(u,v), moat_bottom_funy(u,v)) ...
    );
%

% Outer Bottom Functions
    multiwell_half_length = cell_length * num_tiles_x / 2;
    multiwell_half_width = cell_width * num_tiles_y / 2;
    outer_moat_bottom_depth = (moat_depth - 1) - well_depth; 

    outer_bottom_funx = @(u,v) ( ...
        multiwell_length * (u - 0.5) ...
    );
    outer_bottom_funy = @(u,v) ( ...
        multiwell_width * (v - 0.5) ...
    );
    outer_bottom_funz = @(u,v) ( ...
        (abs(outer_bottom_funx(u,v)) <= multiwell_half_length ...
            & abs(outer_bottom_funy(u,v)) <= multiwell_half_width ...
        ) ...
        * outer_moat_bottom_depth ...
    );
%  

% Blend Functions
    blend1_fun = @(R) R.^5;
    blend2_fun = @(R) 1 - R.^5;
% 

% Line Angles Function
    tan_well_angle = tan(deg2rad(well_angle_deg));
    effective_well_depth = well_depth - 2;
    well_line_offset_term = effective_well_depth / tan_well_angle;
    bezier_top_lower_half_cell_length = ( ...
        (cell_length - 2 * moat_extension_length) / 2 - ...
        moat_well_gap - bezier_curve_projection_length ...
    );
    bezier_top_lower_half_cell_width = ( ...
        (cell_width - 2 * moat_extension_length) / 2 - ...
        moat_well_gap - bezier_curve_projection_length ...
    );
    bezier_bottom_upper_half_cell_length = ( ...
        (cell_length - 2 * moat_extension_length) / 2 - ...
        moat_well_gap - bezier_curve_projection_length - ...
        well_line_offset_term ...
    );
    bezier_bottom_upper_half_cell_width = ( ...
        (cell_width - 2 * moat_extension_length) / 2 - ...
        moat_well_gap - bezier_curve_projection_length - ...
        well_line_offset_term ...
    );

    x_component = @(Theta) ( ...
        bezier_bottom_upper_half_cell_length * ...
        sign(cos(Theta)) .* abs(cos(Theta)).^(2/superellipse_exponent) ...
        - bezier_top_lower_half_cell_length * ...
        sign(cos(Theta)) .* abs(cos(Theta)).^(2/superellipse_exponent) ...
    );
    y_component = @(Theta) ( ...
        bezier_bottom_upper_half_cell_width * ...
        sign(sin(Theta)) .* abs(sin(Theta)).^(2/superellipse_exponent) ...
        - bezier_top_lower_half_cell_width * ...
        sign(sin(Theta)) .* abs(sin(Theta)).^(2/superellipse_exponent) ...
    );
    distance = @(Theta) ( ...
        sqrt(x_component(Theta).^2 + ...
            y_component(Theta).^2 + effective_well_depth^2 ...
        ) ...
    );
    line_angles_fun = @(Theta) ( ...
        acos(effective_well_depth ./ distance(Theta)) ...
    );
%

% Bezier Top Functions 
    superellipse_cos = @(Theta) ( ...
        sign(cos(Theta)) .* abs(cos(Theta)).^(2/superellipse_exponent) ...
    );
    blend1_x_term = @(R, Theta) ( ...
        blend1_fun(R) .* well_top_gap_half_cell_length .* ...
        superellipse_cos(Theta) ...
    );
    blend2_x_term = @(R, Theta) ( ...
        blend2_fun(R) .* (bezier_top_lower_half_cell_length .* ...
        superellipse_cos(Theta) + bezier_curve_projection_length .* ...
        (6 * R .* cos(pi/2 - line_angles_fun(Theta)) .* ...
        (1 - R) + R.^3) .* cos(Theta)) ...
    );
    bezier_top_funx = @(R, Theta) ( ...
        blend1_x_term(R, Theta) + blend2_x_term(R, Theta) ...
    ); 
    superellipse_sin = @(Theta) ( ...
        sign(sin(Theta)) .* abs(sin(Theta)).^(2/superellipse_exponent) ...
    );
    blend1_y_term = @(R, Theta) ( ...
        blend1_fun(R) .* well_top_gap_half_cell_width .* ...
        superellipse_sin(Theta) ...
    );
    blend2_y_term = @(R, Theta) ( ...
        blend2_fun(R) .* (bezier_top_lower_half_cell_width .* ...
        superellipse_sin(Theta) + bezier_curve_projection_length .* ...
        (6 * R .* cos(pi/2 - line_angles_fun(Theta)) .* ...
        (1 - R) + R.^3) .* sin(Theta)) ...
    );
    bezier_top_funy = @(R, Theta) ( ...
        blend1_y_term(R, Theta) + blend2_y_term(R, Theta) ...
    ); 
    bezier_top_funz = @(R, Theta) 3 * R - 3 * R.^2 + R.^3;
%

% Well line Functions
    blend1_line_x_term = @(R) ( ...
        (1 - R) * bezier_top_lower_half_cell_length ...
    );
    blend2_line_x_term = @(R) ( ...
        R * bezier_bottom_upper_half_cell_length ...
    );
    well_line_funx = @(R, Theta) ( ...
        (blend1_line_x_term(R) + blend2_line_x_term(R)) .* ...
        superellipse_cos(Theta) ...
    ); 
    blend1_line_y_term = @(R) ( ...
        (1 - R) * bezier_top_lower_half_cell_width ...
    );
    blend2_line_y_term = @(R) ( ...
        R * bezier_bottom_upper_half_cell_width ...
    );
    well_line_funy = @(R, Theta) ( ...
        (blend1_line_y_term(R) + blend2_line_y_term(R)) .* ...
        superellipse_sin(Theta) ...
    );
    well_line_funz = @(R, Theta) -R * effective_well_depth; 
%

% Bezier Bottom Functions
    bezier_bottom_lower_half_cell_length = ( ...
        (cell_length - 2 * moat_extension_length) / 2 - ...
        moat_well_gap - 2 * bezier_curve_projection_length - ...
        well_line_offset_term ...
    );
    bezier_bottom_lower_half_cell_width = ( ...
        (cell_width - 2 * moat_extension_length) / 2 - ...
        moat_well_gap - 2 * bezier_curve_projection_length - ...
        well_line_offset_term ...
    );

    blend1_bottom_x_term = @(R, Theta) ( ...
        blend1_fun(R) .* bezier_bottom_lower_half_cell_length .* ...
        superellipse_cos(Theta) ...
    );
    blend2_bottom_x_term = @(R, Theta) ( ...
        blend2_fun(R) .* (bezier_bottom_upper_half_cell_length .* ...
        superellipse_cos(Theta) - bezier_curve_projection_length .* ...
        (6 * R .* cos(pi/2 - line_angles_fun(Theta)) .* ...
        (1 - R) + R.^3) .* cos(Theta)) ...
    );
    bezier_bottom_funx = @(R, Theta) ( ...
        blend1_bottom_x_term(R, Theta) + ...
        blend2_bottom_x_term(R, Theta) ...
    );
    blend1_bottom_y_term = @(R, Theta) ( ...
        blend1_fun(R) .* bezier_bottom_lower_half_cell_width .* ...
        superellipse_sin(Theta) ...
    );
    blend2_bottom_y_term = @(R, Theta) ( ...
        blend2_fun(R) .* (bezier_bottom_upper_half_cell_width .* ...
        superellipse_sin(Theta) - bezier_curve_projection_length .* ...
        (6 * R .* cos(pi/2 - line_angles_fun(Theta)) .* ...
        (1 - R) + R.^3) .* sin(Theta)) ...
    );
    bezier_bottom_funy = @(R, Theta) ( ...
        blend1_bottom_y_term(R, Theta) + ...
        blend2_bottom_y_term(R, Theta) ...
    );
    bezier_bottom_funz = @(R, Theta) -3 * R + 3 * R.^2 - R.^3;
%

% Moat Line Functions
    blend1_moat_line_x_term  = @(R) ( ...
        (1 - R) * well_top_half_cell_length ...
    );
    blend2_moat_line_x_term  = @(R) ( ...
        R * well_top_extended_half_cell_length ...
    );
    rectangle_line_x = @(Theta) ( ...
        abs(cos(Theta)) .* cos(Theta) + ...
        abs(sin(Theta)) .* sin(Theta) ...
    );
    moat_line_funx = @(R,Theta) ( ...
        (blend1_moat_line_x_term(R) + ...
            blend2_moat_line_x_term(R) ...
        ) ...
        .* rectangle_line_x(Theta) ...
    );
    blend1_moat_line_y_term  = @(R) ( ...
        (1 - R) * well_top_half_cell_width ...
    );
    blend2_moat_line_y_term  = @(R) ( ...
        R * well_top_extended_half_cell_width ...
    );
    rectangle_line_y = @(Theta) ( ...
        abs(cos(Theta)) .* cos(Theta) - ...
        abs(sin(Theta)) .* sin(Theta) ...
    );
    moat_line_funy = @(R,Theta) ( ...
        (blend1_moat_line_y_term(R) + ...
            blend2_moat_line_y_term(R) ...
        ) ...
        .* rectangle_line_y(Theta) ...
    );
    moat_line_funz = @(R,Theta) 1 - moat_depth * R;
%

% Outer Line Functions
    multiwell_half_length = ( ...
        (cell_length * num_tiles_x + 2 * moat_extension_length) / 2 ...
    );
    multiwell_half_width = ( ...
        (cell_width * num_tiles_y + 2 * moat_extension_length) / 2 ...
    );
    multiwell_extended_half_length = ( ...
        (cell_length * num_tiles_x + moat_extension_length) / 2 ...
    );
    multiwell_extended_half_width = ( ...
        (cell_width * num_tiles_y + moat_extension_length) / 2 ...
    );

    outer_line_funx = @(R,Theta) ( ...
        ((1 - R) * multiwell_half_length + ...
            R * multiwell_extended_half_length ...
        ) ...
        .* rectangle_line_x(Theta) ...
    );
    outer_line_funy = @(R,Theta) ( ...
        ((1 - R) * multiwell_half_width ...
            + R * multiwell_extended_half_width ...
        ) ...
        .* rectangle_line_y(Theta) ...
    );
    outer_line_funz = @(R,Theta) 1 - moat_depth * R;
%

% Tray Flange Functions
    outer_flange_half_length = ( ...
        tray_outer_length / 2 - tray_flange_length ...
    );
    outer_flange_half_width = ( ...
        tray_outer_width / 2 - tray_flange_length ...
    );

    tray_flange_funx = @(u,v) tray_outer_length * (u - 0.5);
    tray_flange_funy = @(u,v) tray_outer_width * (v - 0.5);
    tray_flange_funz = @(u,v) ( ...
        tray_flange_height * ~( ...
            abs(tray_flange_funx(u,v)) <= outer_flange_half_length & ...
            abs(tray_flange_funy(u,v)) <= outer_flange_half_width ...
        ) ...
    );
%

% Tray Triangle Functions
    void_value = -20; 
    tray_triangle_offset = tray_outer_length - triangle_offset;
    triangle_double_offset_length = ( ...
        triangle_length + 2 * triangle_offset ...
    );
    tray_offset_triagnle_length = ( ...
        tray_outer_length - triangle_length - 2 * triangle_offset ...
    );

    tray_triangle_funx = @(u,v) tray_outer_length * u;
    tray_triangle_funy = @(u,v) tray_outer_width * v;
    tray_triangle_funz = @(u,v) ( ...
        void_value * ( ...
            (tray_triangle_funx(u,v) >= triangle_offset & ...
                tray_triangle_funy(u,v) >= triangle_offset & ...
                tray_triangle_funx(u,v) + tray_triangle_funy(u,v) <= ...
                triangle_double_offset_length ...
            ) ...
            | (tray_triangle_funx(u,v) <= tray_triangle_offset & ...
                tray_triangle_funy(u,v) >= triangle_offset & ...
                tray_triangle_funx(u,v) - tray_triangle_funy(u,v) >= ...
                tray_offset_triagnle_length ...
            ) ...
        ) ...
    );
%

% Tray Well Functions
    tray_outer_well_length = tray_outer_length / 2 - tray_well_length; 
    tray_outer_well_width = tray_outer_width / 2 - tray_well_width;

    tray_well_funx = @(u,v) tray_outer_length * (u - 0.5);
    tray_well_funy = @(u,v) tray_outer_width * (v - 0.5);
    tray_well_funz = @(u,v) ( ...
        -tray_height * ( ...
            abs(tray_well_funx(u,v)) <= tray_outer_well_length & ...
            abs(tray_well_funy(u,v)) <= tray_outer_well_width ...
        ) ...
    );
%

% Outer Tray Line Functions 
    outer_tray_line_height = tray_height - tray_flange_height;
    tray_outer_flange_line_length = ( ...
        tray_outer_length / 2 - tray_flange_length - ...
        tray_outer_line_length ...
    );
    tray_outer_flange_line_width = ( ...
        tray_outer_width / 2 - tray_flange_length - ...
        tray_outer_line_length ...
    ); 

    outer_tray_line_funx = @(R,Theta) ( ...
        ((1 - R) * outer_flange_half_length + ...
            R * tray_outer_flange_line_length ...
        ) ...
        .* rectangle_line_x(Theta) ...
    );
    outer_tray_line_funy = @(R,Theta) ( ...
        ((1 - R) * outer_flange_half_width + ...
            R * tray_outer_flange_line_width ...
        ) ...
        .* rectangle_line_y(Theta) ...
    );
    outer_tray_line_funz = @(R,Theta) outer_tray_line_height * R;
% 

% Triangle Line Functions 
    triangle_4th_length = triangle_length / 4; 
    triangle_outer_4th_length = ( ...
        (triangle_length + (sqrt(2) + 2) * triangle_line_length) / 4 ...
    ); 
    lower_triangle_offset_x = ( ...
        -tray_outer_length / 2 + triangle_offset + triangle_length / 2 ...
    );
    lower_triangle_offset_y = ( ...
        -tray_outer_width / 2 + triangle_offset + triangle_length / 2 ...
    );
    upper_triangle_offset_x = ( ...
        -tray_outer_length / 2 + triangle_offset + ...
        triangle_length / 2 + sqrt(2) / 2 * triangle_line_length ...
    );
    upper_triangle_offset_y = ( ...
        -tray_outer_width / 2 + triangle_offset + ...
        triangle_length / 2 + sqrt(2) / 2 * triangle_line_length ...
    );

    triangle_line_1 = @(Theta) ( ...
        abs(cos(Theta)) .* cos(Theta) + ...
        abs(sin(Theta)) .* sin(Theta) - 1 ...
    );
    triangle_line_2 = @(Theta) ( ...
        1 + abs(sin(Theta)) .* sin(Theta) - ...
        abs(-cos(Theta)) .* cos(Theta) ...
    );
    triangle_line_funx = @(R, Theta) ( ...
        (Theta >= pi/2 & Theta <= 3*pi/2) .* 0 + ...
        (Theta > 3*pi/2 & Theta < 2*pi) .* ((1 - R) .* ...
            (triangle_4th_length * triangle_line_1(Theta) + ...
                lower_triangle_offset_x ...
            ) ...
            + R .* (triangle_outer_4th_length * ...
                triangle_line_1(Theta) + upper_triangle_offset_x ...
            ) ...
        ) ...
        + (Theta > 0 & Theta < pi/2) .* ((1 - R) .* ...
            (triangle_4th_length * triangle_line_2(Theta) + ...
                lower_triangle_offset_x ...
            ) ...
            + R .* (triangle_outer_4th_length * ...
                triangle_line_2(Theta) + upper_triangle_offset_x ...
            ) ...
        )...
    );
    triangle_line_funy = @(R, Theta) ( ...
        (Theta >= pi/2 & Theta <= 3*pi/2) .* 0 + ...
        (Theta > 3*pi/2 & Theta < 2*pi) .* ((1 - R) .* ...
            (-triangle_4th_length * triangle_line_1(Theta) + ...
                lower_triangle_offset_y ...
            ) ...
            + R .* (-triangle_outer_4th_length * ...
                triangle_line_1(Theta) + upper_triangle_offset_y ...
            ) ...
        ) ...
        + (Theta > 0 & Theta < pi/2) .* ((1 - R) .* ...
            (-triangle_4th_length * triangle_line_2(Theta) + ...
                lower_triangle_offset_y ...
            ) ... 
            + R .* (-triangle_outer_4th_length * ...
                triangle_line_2(Theta) + upper_triangle_offset_y ...
            ) ...
        ) ...
    );
    triangle_line_funz = @(R, Theta) ( ...
        (1 - R) * triangle_line_start_height + ...
        R * triangle_line_end_height ...
    );
%

% Create Surfaces
    fig = figure('Visible', 'off');
    hold on;
    bezier_top_surface = fsurf( ...
        bezier_top_funx, ...
        bezier_top_funy, ...
        bezier_top_funz, ...
        [0 1 0 2*pi], ...
        'MeshDensity', ...
        300 ...
    );
    bezier_bottom_surface = fsurf( ...
        bezier_bottom_funx, ...
        bezier_bottom_funy, ...
        bezier_bottom_funz, ...
        [0 1 0 2*pi], ...
        'MeshDensity', ...
        300 ...
    );
    well_line_surface = fsurf( ...
        well_line_funx, ...
        well_line_funy, ...
        well_line_funz, ...
        [0 1 0 2*pi] ...
    );
    moat_line_surface = fsurf( ...
        moat_line_funx, ...
        moat_line_funy, ...
        moat_line_funz, ...
        [0 1 0 2*pi] ...
    );
    outer_line_surface = fsurf( ...
        outer_line_funx, ...
        outer_line_funy, ...
        outer_line_funz, ...
        [0 1 0 2*pi] ...
    );
    outer_tray_line_surface = fsurf( ...
        outer_tray_line_funx, ...
        outer_tray_line_funy, ...
        outer_tray_line_funz, ...
        [0 1 0 2*pi] ...
    );
    triangle_line_surface = fsurf( ...
        triangle_line_funx, ...
        triangle_line_funy, ...
        triangle_line_funz, ...
        [0 1 0 2*pi] ...
    );
    hold off;
% 

% Extract Surface Data
    bezier_top_x_data = bezier_top_surface.XData; 
    bezier_top_y_data = bezier_top_surface.YData; 
    bezier_top_z_data = bezier_top_surface.ZData; 
    bezier_bottom_x_data = bezier_bottom_surface.XData; 
    bezier_bottom_y_data = bezier_bottom_surface.YData; 
    bezier_bottom_z_data = bezier_bottom_surface.ZData; 
    well_line_x_data = well_line_surface.XData; 
    well_line_y_data = well_line_surface.YData; 
    well_line_z_data = well_line_surface.ZData; 
    moat_line_x_data = moat_line_surface.XData; 
    moat_line_y_data = moat_line_surface.YData; 
    moat_line_z_data = moat_line_surface.ZData; 
    outer_line_x_data = outer_line_surface.XData; 
    outer_line_y_data = outer_line_surface.YData; 
    outer_line_z_data = outer_line_surface.ZData; 
    outer_tray_line_x_data = outer_tray_line_surface.XData; 
    outer_tray_line_y_data = outer_tray_line_surface.YData; 
    outer_tray_line_z_data = outer_tray_line_surface.ZData; 
    triangle_line_x_data = triangle_line_surface.XData; 
    triangle_line_y_data = triangle_line_surface.YData; 
    triangle_line_z_data = triangle_line_surface.ZData; 
    close(fig);
%

% Remove Duplicates and (0,0) From Line Surfaces
    [~, moat_unique_idx] = unique( ...
        [moat_line_x_data(:), moat_line_y_data(:)], 'rows' ...
    );
    moat_line_x_data = moat_line_x_data(moat_unique_idx);
    moat_line_y_data = moat_line_y_data(moat_unique_idx);
    moat_line_z_data = moat_line_z_data(moat_unique_idx);
    [~, outer_unique_idx] = unique(...
        [outer_line_x_data(:), outer_line_y_data(:)], 'rows'...
    );
    outer_line_x_data = outer_line_x_data(outer_unique_idx); 
    outer_line_y_data = outer_line_y_data(outer_unique_idx); 
    outer_line_z_data = outer_line_z_data(outer_unique_idx); 
    [~, tray_outer_unique_idx] = unique( ...
        [outer_tray_line_x_data(:), outer_tray_line_y_data(:)], 'rows' ...
    );
    outer_tray_line_x_data = outer_tray_line_x_data(tray_outer_unique_idx); 
    outer_tray_line_y_data = outer_tray_line_y_data(tray_outer_unique_idx);
    outer_tray_line_z_data = outer_tray_line_z_data(tray_outer_unique_idx);
    [~, triangle_line_unique_idx] = unique( ...
        [triangle_line_x_data(:), triangle_line_y_data(:)], 'rows' ...
    );
    triangle_line_x_data = triangle_line_x_data(triangle_line_unique_idx); 
    triangle_line_y_data = triangle_line_y_data(triangle_line_unique_idx);
    triangle_line_z_data = triangle_line_z_data(triangle_line_unique_idx);
    non_zero_idx = ~( ...
        triangle_line_x_data == 0 & triangle_line_y_data == 0 ...
    );
    triangle_line_x_data = triangle_line_x_data(non_zero_idx); 
    triangle_line_y_data = triangle_line_y_data(non_zero_idx); 
    triangle_line_z_data = triangle_line_z_data(non_zero_idx);
%

% Mesh Grid Creation
    size_multiwell_x = ( ...
        num_tiles_x * num_points + 2 * ...
        ceil(moat_extension_length / cell_length * num_points) ...
    );
    size_multiwell_y = ( ...
        num_tiles_y * num_points + 2 * ...
        ceil(moat_extension_length / cell_width * num_points) ...
    );
    [multiwell_x, multiwell_y] = meshgrid( ...
        linspace( ...
            min(outer_line_x_data(:)), ...
            max(outer_line_x_data(:)), ...
            size_multiwell_x ...
        ) ...
        , linspace( ...
            min(outer_line_y_data(:)), ...
            max(outer_line_y_data(:)), ...
            size_multiwell_y ...
        ) ...
    );
    [u_multiwell, v_multiwell] = meshgrid( ...
        linspace(0, 1, size_multiwell_x), ...
        linspace(0, 1, size_multiwell_y) ...
    );
    tray_mesh_step_x = ((multiwell_x(1, 2) - multiwell_x(1, 1)) - 1e-5);
    tray_mesh_step_y = ((multiwell_y(2, 1) - multiwell_y(1, 1)) - 1e-5);
    [tray_x, tray_y] = meshgrid( ...
        -tray_outer_length/2 : tray_mesh_step_x : tray_outer_length/2, ...
        -tray_outer_width/2 : tray_mesh_step_y : tray_outer_width/2 ...
    );
    [size_outer_tray_width, size_outer_tray_length] = size( ...
        meshgrid( ...
            0 : tray_mesh_step_x : tray_outer_length, ...
            0 : tray_mesh_step_y : tray_outer_width ...
        ) ...
    );
    [u_outer_tray, v_outer_tray] = meshgrid( ...
        linspace(0, 1, size_outer_tray_length), ...
        linspace(0, 1, size_outer_tray_width) ...
    );
%

% Interpolate Surfaces To Mesh Grids
    well_top_z = ( ...
        double(well_top_funz(u_multiwell, v_multiwell)) ...
    );
    moat_top_z = ( ...
        double(moat_top_funz(u_multiwell, v_multiwell)) ...
    );
    moat_mid_z = ( ...
        double(moat_mid_funz(u_multiwell, v_multiwell)) ...
    );
    moat_bottom_z = ( ...
        double(moat_bottom_funz(u_multiwell, v_multiwell)) ...
    );
    outer_bottom_z = ( ...
        double(outer_bottom_funz(u_multiwell, v_multiwell)) ...
    );
    tray_flange_z = ( ...
        double(tray_flange_funz(u_outer_tray, v_outer_tray)) ...
    );
    tray_triangle_z = ( ...
        double(tray_triangle_funz(u_outer_tray, v_outer_tray)) ...
    );
    tray_well_z = ( ...
        double(tray_well_funz(u_outer_tray, v_outer_tray)) ...
    );
    bezier_top_z = ( ...
        fillmissing( ...
            griddata( ...
                bezier_top_x_data(:), ...
                bezier_top_y_data(:), ...
                bezier_top_z_data(:), ...
                multiwell_x, multiwell_y ...
            ) ...
            , 'constant', 0 ...
        ) ...
    );
    bezier_bottom_z = ( ...
        fillmissing( ...
            griddata( ...
                bezier_bottom_x_data(:), ...
                bezier_bottom_y_data(:), ...
                bezier_bottom_z_data(:), ...
                multiwell_x, multiwell_y ...
            ) ...
            , 'constant', 0 ...
        ) ...
    );
    well_line_z = ( ...
        fillmissing( ...
            griddata( ...
                well_line_x_data(:), ...
                well_line_y_data(:), ...
                well_line_z_data(:), ...
                multiwell_x, multiwell_y ...
            ) ...
            , 'constant', 0 ...
        ) ...
    );
    moat_line_z = ( ...
        fillmissing( ...
            griddata( ...
                moat_line_x_data(:), ...
                moat_line_y_data(:), ...
                moat_line_z_data(:), ...
                multiwell_x, multiwell_y ...
            ) ...
            , 'constant', 0 ...
        ) ...
    );
    outer_line_z = ( ...
        fillmissing( ...
            griddata( ...
                outer_line_x_data(:), ...
                outer_line_y_data(:), ...
                outer_line_z_data(:), ...
                multiwell_x, multiwell_y ...
            ) ...
            , 'constant', 0 ...
        ) ...
    );
    outer_tray_line_z = ( ...
        fillmissing( ...
            griddata( ...
                outer_tray_line_x_data(:), ...
                outer_tray_line_y_data(:), ...
                outer_tray_line_z_data(:), ...
                tray_x, tray_y ...
            ) ...
            , 'constant', -tray_flange_height ...
        ) ...
        + tray_flange_height ...
    );
    triangle_line_z = ( ...
        fillmissing( ...
            griddata( ...
                triangle_line_x_data(:), ...
                triangle_line_y_data(:), ...
                triangle_line_z_data(:), ...
                tray_x, tray_y ....
            ) ...
            , 'constant', 0 ...
        ) ...
    ); 
% 

% Calculate Unit Cell X, Y, and Z Values
    start_cell_row_index = ( ...
        (num_tiles_y - 1) * num_points / 2 + ...
        ceil(moat_extension_length / cell_width * num_points) + 1 ...
    );
    end_cell_row_index = ( ...
        (num_tiles_y - 1) * num_points / 2 + ...
        ceil(moat_extension_length / cell_width * num_points) + ...
        num_points ...
    );
    start_cell_col_index = ( ...
        (num_tiles_x - 1) * num_points / 2 + ...
        ceil(moat_extension_length / cell_length * num_points) + 1 ...
    );
    end_cell_col_index = ( ...
        (num_tiles_x - 1) * num_points / 2 + ...
        ceil(moat_extension_length / cell_length * num_points) + ...
        num_points ...
    );
    cell_x = ( ...
        multiwell_x(...
            start_cell_row_index : end_cell_row_index, ...
            start_cell_col_index : end_cell_col_index ...
        ) ...
        + cell_length / 2 ...
    );
    cell_y = (...
        multiwell_y( ...
            start_cell_row_index : end_cell_row_index, ...
            start_cell_col_index : end_cell_col_index ...
        ) ...
        + cell_width / 2 ...
    );
    cell_z = ( ...
        well_top_z - ...
        moat_top_z + ...
        moat_mid_z + ...
        moat_bottom_z + ...
        bezier_top_z + ...
        bezier_bottom_z + ...
        well_line_z + ...
        moat_line_z + ...
        well_depth ...
    ); 
    cell_z = ( ...
        cell_z( ...
            start_cell_row_index : end_cell_row_index, ...
            start_cell_col_index : end_cell_col_index ...
        ) ...
    );
%

% Adjust Outer Tray Line Surface
    size_outer_tray_flange_length = ( ...
        (tray_flange_length + tray_outer_line_length) / ...
        tray_outer_length * size_outer_tray_length ...
    );
    size_outer_tray_flange_width = ( ...
        (tray_flange_length + tray_outer_line_length) / ...
        tray_outer_width * size_outer_tray_width ...
    ); 
    outer_tray_line_z( ...
        ceil(size_outer_tray_flange_width) + 1 : ...
        size_outer_tray_width - ceil(size_outer_tray_flange_width), ...
        ceil(size_outer_tray_flange_length) + 1 : ...
        size_outer_tray_length - ceil(size_outer_tray_flange_length) ...
    ) = 0;
    outer_tray_line_z = ( ...
        [ ...
            [ ...
                outer_tray_line_z( ...
                    1 : size_outer_tray_width / 2, ...
                    1 : size_outer_tray_length / 2 ...
                ) ...
                , fliplr( ...
                    outer_tray_line_z( ...
                        1 : size_outer_tray_width / 2, ...
                        1 : size_outer_tray_length / 2 ...
                    ) ...
                ) ...
            ]; ...
            [ ...
                flipud( ...
                    outer_tray_line_z( ...
                        1 : size_outer_tray_width / 2, ...
                        1 : size_outer_tray_length / 2 ...
                    ) ...
                ) ...
                , rot90( ...
                    outer_tray_line_z( ...
                        1 : size_outer_tray_width / 2, ...
                        1 : size_outer_tray_length / 2 ...
                    ) ...
                    , 2 ...
                ) ...
            ] ...
        ] ...
    );
%

% Define Left and Right Triangle Lines
    triangle_line_z(:, [1 : 40, 339 : size(triangle_line_z, 2)]) = 0;
    triangle_line_z(227 : size(triangle_line_z, 1), :) = 0;
    triangle_line_left_z = triangle_line_z; 
    triangle_line_right_z = fliplr(triangle_line_z); 
%

% Combine and Adjust Outer Tray Line and Triangle Tray Surfaces
    outer_tray_line_z = ( ...
        outer_tray_line_z + void_value * ...
        (triangle_line_left_z + triangle_line_right_z) ...
    ); 
    outer_tray_line_z(outer_tray_line_z < -1) = 0;
    tray_outer_line_triangle_z = outer_tray_line_z + tray_triangle_z; 
    tray_outer_line_triangle_z(tray_outer_line_triangle_z < -1) = 6.75;
%

% Calculate Tray X, Y, and Z Values
    tray_x = tray_x + tray_outer_length / 2; 
    tray_y = tray_y + tray_outer_width / 2; 
    tray_z = ( ...
        tray_flange_z + ...
        tray_outer_line_triangle_z + ...
        triangle_line_left_z + ...
        triangle_line_right_z ...
    );
    tray_z(tray_z == 0) = 15;
    tray_z = tray_z + tray_well_z; 
%

% Create Tiled Unit Cell
    tiled_cell_x = zeros(1, num_tiles_x * num_points);
    for i = 1 : num_tiles_x
        tiled_cell_x( 1, (i - 1) * num_points + 1 : i * num_points) = ...
        cell_x(1, :) + (i - 1) * cell_length;
    end
    tiled_cell_y = zeros(num_tiles_y * num_points, 1);
    for i = 1:num_tiles_y
        tiled_cell_y((i - 1) * num_points + 1 : i * num_points, 1) = ...
        cell_y(:, 1) + (i - 1) * cell_width;
    end
%

% Calculate Tiled Unit Cell X, Y, and Z Values 
    tiled_cell_x = repmat(tiled_cell_x, num_tiles_y * num_points, 1);
    tiled_cell_y = repmat(tiled_cell_y, 1, num_tiles_x * num_points);
    tiled_cell_z = repmat(cell_z, num_tiles_y, num_tiles_x);
%

% Calculate Tiled Unit Cell Border X, Y, and Z Values
    num_points_tiled_x = num_tiles_x * num_points;
    num_points_tiled_y = num_tiles_y * num_points;
    start_tiled_border_row_index = ( ...
        ceil( ...
            (num_points_tiled_y + 2 * ...
                ceil(moat_extension_length / ...
                    cell_width * num_points ...
                ) ...
                - num_points_tiled_y ...
            ) ...
            / 2 ...
        ) ...
        + 1 ...
    );
    end_tiled_border_row_index = ( ...
        ceil( ...
            (num_points_tiled_y + 2 * ...
                ceil(moat_extension_length / ...
                    cell_width * num_points ...
                ) ...
                - num_points_tiled_y ...
            ) ...
            / 2 ...
        ) ...
        + num_points_tiled_y ...
    );
    start_tiled_border_col_index = ( ...
        ceil( ...
            (num_points_tiled_x + 2 * ...
                ceil(moat_extension_length / ...
                    cell_length * num_points ...
                ) ...
                - num_points_tiled_x ...
            ) ...
            / 2 ...
        ) ...
        + 1 ...
    );
    end_tiled_border_col_index = ( ...
        ceil( ...
            (num_points_tiled_x + 2 * ...
                ceil(moat_extension_length / ...
                    cell_length * num_points ...
                ) ...
                - num_points_tiled_x ...
            ) ...
            / 2 ...
        ) ...
        + num_points_tiled_x ...
    );
    outer_tiled_cell_x = multiwell_x + (num_tiles_x * cell_length) / 2; 
    outer_tiled_cell_x( ...
        start_tiled_border_row_index : end_tiled_border_row_index, ...
        start_tiled_border_col_index : end_tiled_border_col_index ...
    ) = 0;
    outer_tiled_cell_y = multiwell_y + (num_tiles_y * cell_width) / 2; 
    outer_tiled_cell_y( ...
        start_tiled_border_row_index : end_tiled_border_row_index, ...
        start_tiled_border_col_index : end_tiled_border_col_index ...
    ) = 0;
    outer_tiled_cell_z = outer_bottom_z + outer_line_z + well_depth;
%

% Combine Tiled Unit Cell and Border 
    size_padded_tiled_y = ( ...
        num_points_tiled_y + 2 * ...
        ceil(moat_extension_length / cell_width * num_points) ...
    );
    size_padded_tiled_x = ( ...
        num_points_tiled_x + 2 * ...
        ceil(moat_extension_length / cell_length * num_points) ...
    );
    padded_tiled_cell_x = ( ...
        zeros(size_padded_tiled_y, size_padded_tiled_x) ...
    ); 
    padded_tiled_cell_y = ( ...
        zeros(size_padded_tiled_y, size_padded_tiled_x) ...
    );
    padded_tiled_cell_z = ( ...
        zeros(size_padded_tiled_y, size_padded_tiled_x) ...
    );
    padded_tiled_cell_x( ...
        start_tiled_border_row_index : end_tiled_border_row_index, ...
        start_tiled_border_col_index : end_tiled_border_col_index ...
    ) = tiled_cell_x;
    padded_tiled_cell_y( ...
        start_tiled_border_row_index : end_tiled_border_row_index, ...
        start_tiled_border_col_index : end_tiled_border_col_index ...
    ) = tiled_cell_y;
    padded_tiled_cell_z( ...
        start_tiled_border_row_index : end_tiled_border_row_index, ...
        start_tiled_border_col_index : end_tiled_border_col_index ...
    ) = tiled_cell_z;
% 

% Calculate multiwell x, y, and z values
    multiwell_x = ( ...
        padded_tiled_cell_x + ...
        outer_tiled_cell_x + ...
        moat_extension_length ...
    ); 
    multiwell_y = ( ...
        padded_tiled_cell_y + ...
        outer_tiled_cell_y + ...
        moat_extension_length ...
    ); 
    multiwell_z = ( ...
        padded_tiled_cell_z + ...
        outer_tiled_cell_z ...
    );
%

% Combine Tray and Muiltwell Surfaces
    [size_multiwell_width, size_multiwell_length] = size(multiwell_z);
    padded_multiwell_z = zeros( ...
        size_multiwell_width + ...
        size_outer_tray_width - size_multiwell_width, ...
        size_multiwell_length + ...
        size_outer_tray_length - size_multiwell_length ...
    );
    padded_multiwell_z( ...
        (size_outer_tray_width - size_multiwell_width) / 2 + 1 : ...
        end - (size_outer_tray_width - size_multiwell_width) / 2, ...
        (size_outer_tray_length - size_multiwell_length) / 2 + 1 : ...
        end - (size_outer_tray_length - size_multiwell_length) / 2 ...
    ) = multiwell_z + tray_height - well_depth - 1;
    tray_combined_z = tray_z + padded_multiwell_z; 
%

% Create Text 
    figure(1);
    text( ...
        .1, 0, text_string, ...
        'FontName', 'Arial', ...
        'FontSize', 16, ...
        'FontWeight', 'normal', ...
        'Interpreter', 'none' ...
    );
    axis image; axis off;
    xlim([0, 12]); ylim([-0.4, 0.4]);
%

% Capture The Text As An Image
    text_image = getframe(gca);
    text_image = (single(255 - text_image.cdata(:, :, 1)) / 255);
    text_image = round(text_image - median(median(text_image)));
    close(1);
    text_image = text_image( ...
        find(sum(text_image, 2) > 0, 1, 'first') : ...
        find(sum(text_image, 2) > 0, 1, 'last'), ...
        find(sum(text_image, 1) > 0, 1, 'first') : ...
        find(sum(text_image, 1) > 0, 1, 'last') ...
    );
    text_image = fliplr(imrotate(text_image, 180));
%

% Create Test Mesh 
    text_mesh_step_y = multiwell_y(2, 1) - multiwell_y(1, 1);
    text_mesh_step_x = multiwell_x(1, 2) - multiwell_x(1, 1);
    overall_test_length = ( ...
        overall_test_width * size(text_image, 1) / size(text_image, 2) ...
    );

    size_text_x = size( ...
        0 : text_mesh_step_y : overall_test_length, 2 ...
    ); 
    size_text_y = size( ...
        0 : text_mesh_step_x : overall_test_width, 2 ...
    );
    text_image = imresize(text_image, [size_text_x, size_text_y]);
    text_z = double(zeros([size_text_x, size_text_y]) + text_image);
    text_z(text_z < 0) = 0;
    text_z(text_z > 1) = 1;
%

% Combine Text With Tray Surface 
    text_tray_z = zeros([size_outer_tray_width, size_outer_tray_length]);
    text_tray_z( ...
        find(tray_y(:, 1) > 83, 1) - size_text_x + 1 : ...
        find(tray_y(:, 1) > 83, 1), ...
        find(tray_x(1, :) > 5, 1) : ...
        find(tray_x(1, :) > 5, 1) + size_text_y - 1 ...
    ) = text_z;
    tray_combined_z = tray_combined_z + text_tray_z * 0.5; 
%

% Plot Unit Cell, Multiwell, and Tray Surfaces
    figure;
    mesh(cell_x, cell_y, cell_z);
    xlabel('X-axis'); ylabel('Y-axis'); zlabel('Z-axis');
    title('Unit Cell Surface');
    grid on; axis equal; axis vis3d; view(3);

    % figure;
    % mesh(multiwell_x, multiwell_y, multiwell_z);
    % xlabel('X-axis'); ylabel('Y-axis'); zlabel('Z-axis');
    % title('Multiwell Surface');
    % grid on; axis equal; axis vis3d; view(3);

    % figure;
    % mesh(tray_x, tray_y, tray_z);
    % xlabel('X-axis'); ylabel('Y-axis'); zlabel('Z-axis');
    % title('Tray Surface');
    % grid on; axis equal; axis vis3d; view(3);

    figure;
    mesh(tray_x, tray_y, tray_combined_z);
    xlabel('X-axis'); ylabel('Y-axis'); zlabel('Z-axis');
    title('Combined Tray Surface');
    grid on; axis equal; axis vis3d; view(3);
%